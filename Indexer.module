<?php


class Indexer extends WireData implements Module, ConfigurableModule {

    
    protected static $defaults = array(
            'pdfpath' => "/usr/bin/pdftotext",
            'wordpath' => "/usr/bin/wvText",
            'ignoredchars' => ".\n,\n;\n'\n$\n%\n?\n-\n_\n–\n\"\n…",
            'minlength' => 2,
            'pdfphp' => 0
            
    );
    
    
    const fieldName = 'indexer';
    
    public static function getModuleInfo() {

        return array(

            'title' => 'Site Indexer (beta)', 
            'version' => 51, 
            'summary' => 'This module provide an efficent search index, also with pdf/doc files (require poppler-utils and wv)',
            'href' => 'http://alessiodalbianco.me',
            'singular' => true, 
            'autoload' => true, 
            );
    }

    
    
    public function install(){
        
        // Create the index field on all pages.
        // Check if just exists.
        $indexerField = $this->fields->get('name='.self::fieldName );
        
        if( !$indexerField ):
            $field = new Field(); 
            $field->type = $this->modules->get("FieldtypeTextarea"); 
            $field->name = self::fieldName; 
            $field->label = 'Index';
            
            $field->labelFieldName = 'title';
            $field->inputfield = 'InputfieldTextarea';
            $field->collapsed = 4;
            $field->flags = Field::flagAutojoin | Field::flagGlobal; 
            $field->save();
            $this->message("Created index field: " . self::fieldName);
        
        else:
           $this->error("The field:". self::fieldName . " just exists" );
        endif;
        
    }
    
  public function uninstall(){
      $indexerField = $this->fields->get('name='.self::fieldName );
      $indexerField->flags = Field::flagSystemOverride;
      $indexerField->flags = 0;
      $templates = $this->templates;
      foreach( $templates as $template ): 
        if($template->hasField($indexerField)) {
            $fieldgroup = $template->fieldgroup;     
            $fieldgroup->remove($indexerField); 
            $fieldgroup->save();
            $this->message("Removed indexer field from ". $template->name . " fieldgroup"); 
        }
      endforeach;      
      $this->fields->delete($indexerField);
      $this->message("The field: " . self::fieldName . " is removed");
      
  }
    
   static public function getModuleConfigInputfields(array $data) {
        $data = array_merge(self::$defaults, $data);

        $fields = new InputfieldWrapper();
        $modules = wire('modules');
        
        $field = $modules->get('InputfieldText');
        $field->label = __("Path to pdftotext executable");
        $field->attr('name', 'pdfpath');
        $field->attr('size', 30);
        $field->attr('value', $data['pdfpath']);
        
        $fields->append($field);
        
        $field = $modules->get('InputfieldCheckbox');
        $field->label = __("Use the built-in php class ?"); 
        $field->description = __("if you check this the PHP class will be used insted of poppler");
        $field->attr('name', 'pdfphp');
        
        if($data['pdfphp'])
            $field->attr('checked', $data['pdfphp']);
        
        $fields->append($field);
        
        $field = $modules->get('InputfieldText');
        $field->label = __("Path to wvText executable");
        $field->attr('name', 'wordpath');
        $field->attr('size', 30);
        $field->attr('value', $data['wordpath']);
        
        $fields->append($field);
        
        $field = $modules->get('InputfieldTextarea');
        $field->label = __("Ignored characters in index");
        $field->notes = __("Inser the characters separated by newline");
        $field->attr('name', 'ignoredchars');
        $field->attr('rows', 20);
        $field->attr('value', $data['ignoredchars']);
        
        $fields->append($field);
        
        
        $field = $modules->get('InputfieldInteger');
        $field->label = __("Minum character to insert in index");
        $field->attr('name', 'minlength');
        $field->attr('size', 10);
        $field->attr('value', $data['minlength']);
        
        $fields->append($field);
        
        
        $field = $modules->get('InputfieldCheckbox');
        $field->label = __("Reindex all objects"); 
        $field->description = __("if you check this all the pages will be re-index");
        $field->attr('name', 'reindex');
        
        $fields->append($field);
        $reindex = wire('input')->post->reindex ? true : false;
        if( $reindex ):
           self::reindexAll();
        endif;
        
        
        return $fields;
    }
   
   public function __construct(){
       $this->pdfpath = $this->getConfig('pdfpath');
       $this->wordpath = $this->getConfig('wordpath');
       $this->minlength = $this->getConfig('minlength');
       $this->pdfphp = $this->getConfig('pdfphp');
       $this->ignoredchars = explode("\n",$this->getConfig('ignoredchars'));
   }
   
    /**
     * Initialize the module
     *
     * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
     * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
     *
     */
    public function init() {
        
        // add a hook after the $pages->save, to issue a notice every time a page is saved
        $this->pages->addHookBefore('save', $this, '___indexObject'); 

    }

    public function ___indexObject($event) {
            
        require_once 'import/Pdf2txt.php';
        
        $args = $event->arguments;
        if (!isset($args[0])) return $event;
        $page = $args[0];
        
        // don't add this to the admin pages
        if($page->template == 'admin') return $event;
        
        // If the page doesn't alredy exists don't do anything.
        if( $page->isNew() ) return $event;
        
        $fulltext = "";
        
        // Now we cicle trough all text field and we append all the 
        // text in $fulltext
        $fields = $page->fields;
        
        foreach ($fields as $field):
            
            if( preg_match('/text|title|url/i', $field->type) && $page->editable($field->name) && $field->name != self::fieldName ):
               $fulltext .= ' '.strip_tags($page->get($field->name));
            endif;
            
            if( preg_match('/file/i', $field->type) && $page->editable($field->name) ):
               
               $files = $page->get($field->name);
               
               foreach( $files as $file ):
                   $filefullpath = $file->filename;
                   
                   // PDF handling
                   if( preg_match('/pdf/i', $file->ext) ):
                       // Check if we use the PHP Class or the Unix utilities
                       if( !$this->pdfphp ):
                           exec($this->pdfpath . ' ' . $filefullpath . ' /tmp/'. $file->name);
                           $fulltext .= ' '.file_get_contents('/tmp/'. $file->name);
                           unlink('/tmp/'. $file->name);
                       else:
                           $fulltext .= Pdf2Text::pdf2txt($filefullpath);
                       endif;
                   endif;
                   
                   // DOC handling
                   if( preg_match('/doc/i', $file->ext) ):
                        
                       exec($this->wordpath . ' ' . $filefullpath . ' /tmp/'. $file->name);
                       $fulltext .= ' '.file_get_contents('/tmp/'. $file->name);
                       unlink('/tmp/'. $file->name);
                       
                   endif;
                   
                   $fulltext .= ' '.$file->description;  
               
               endforeach;
               
               
            endif;

        endforeach;
        
        $keys = $this->getKeywords($fulltext);
        $page->set(self::fieldName,$keys);
        return $event;
    }
    
     /**
     * get the config either default or overwritten by user config
     * @param  string $key name of the option
     * @return mixed      return requested option value
     */
    public function getConfig($key) {
        return ($this->get($key)) ? $this->get($key) : self::$defaults[$key];
    }
    
    /**
     * return an array of words (keywords)
     * @param {string} text
     * @return {string} keywords
     */
    public function getKeywords($text){
        
        $text = str_replace($this->ignoredchars, '', $text);
        $text = trim(preg_replace('/\s+/', ' ', $text));
        $text = trim(preg_replace('/[0-9]*/', '', $text));
        
        $words = explode(' ',trim($text));
        
        // We cleanup the array from spaces and words with length < 2.
        $temp = array();
        foreach ($words as $word):
        
            if( strlen(trim($word)) > intval($this->minlength) ):
                array_push($temp, $word);
            endif;
        
        endforeach;
        
        // remove the duplicated words.
        $words = array_unique($temp);
        
        $words = implode(' ', $words);
        
        return strtolower($words);
        
        
    }
    
    /**
     * Rebuild the index of ALL pages.
     */
    public static function reindexAll(){
        
        $indexerField = wire('fields')->get('name='.self::fieldName );
        $templates = wire('templates');
        $n_pages = 0;
        foreach( $templates as $template ): 
        if($template->hasField($indexerField)) {
               $pages = wire('pages')->find('template='.$template);
               $n_pages = $n_pages + count($pages);
               foreach( $pages as $page ):
                   // Trigger the hook __indexObject
                   $page->save();
               endforeach; 
        }
        endforeach;
        
        
    }
    
}
